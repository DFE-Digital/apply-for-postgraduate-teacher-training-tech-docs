---
title: Introduction
weight: 0
---

# Introduction

This is REST API documentation for the Department for Education’s new "Apply for postgraduate teacher training" service.

Apply will replace the online UCAS application form for postgraduate teacher training. All vendors of student record systems and some training providers will need to make changes to integrate with Apply.

The API is a work in progress. We are publishing draft documentation so that:

- providers and vendors have all the information they need to plan a transition to the new service
- the Apply team can better understand providers’ and vendors’ needs for the API

## What this API is for

Once a candidate has submitted their application via the Apply service, the
application will become available over the API.

Providers can then use the API for:

- [Retrieving applications](/reference/#get-applications)
- [Making an offer to a candidate](/reference/#post-applications-application-id-offer)
- Confirming a candidate [has met conditions](/reference/#post-applications-application-id-confirm-conditions-met), or [has been enrolled](/reference/#post-applications-application-id-confirm-conditions-met)
- [Rejecting unsuccessful applications](/reference/#post-applications-application-id-reject)

To get an idea of how the API works, we recommend you [review the example usage scenarios](/usage-scenarios).

## Codes and reference data

Before each application cycle, UCAS provides vendors with reference data defining how certain values appear in API responses.

DfE Apply will avoid prioprietary codes wherever possible, preferring existing data formats such as ISO-certified standards or HESA codes.

Codes appear in three contexts:

- All dates in the API specification are intended to be [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) compliant
- Nationality is expressed as an [ISO 3166](https://www.iso.org/iso-3166-country-codes.html) country code
- Demographic data required for HESA reporting uses [HESA codes for the 2019/20 Initial Teacher Training return](https://www.hesa.ac.uk/collection/c18053/e/student). When the HESA codes for the next cycle are released, we will update the documentation to reflect these.

## How do I connect to this API?

### Authentication and authorisation

The data held by the Apply service is confidential, only available
to candidates themselves and staff from the training provider to
which applications are made. Therefore authentication will be required
for all API interactions.

Training Provider Staff identify themselves to Apply using DfE
Sign-in, the Single Sign-on service used on the existing _Publish
teacher training courses_ service. This means that the rules
around who is able to see and do what all live inside the Apply
service and student record systems (SRS) will not need to deal with
authorization.

Your existing users will be grant your SRS access to the Apply API on
their behalf via DfE Sign-in, which uses an [OpenID
Connect](https://openid.net/connect/faq/) flow. This works in the
following way:

1. A user is logged into the SRS and tries to perform some action
   involving an API call, such as downloading applications or issuing
   an offer, triggering a request to the API
1. The API returns a 401 Unauthorized response
1. The SRS opens a popup web browser window containing a DfE Sign-in
   login screen
1. The user signs in to DfE Sign-in and confirms that the SRS may
   access their data on Apply
1. The user is redirected back to the SRS with an authorization code,
   which the SRS exchanges with DfE Sign-in for an access token and
   refresh token
1. The SRS stores the access token, which is associated with the user,
   and includes it on subsequent requests to the API

The access token will eventually expire, at which point the SRS will
once again receive a 401 Unauthorized response from Apply. When this
happens the refresh token may be exchanged for a fresh access token
and, assuming the user is still authorized to access the resources in
question.

_Last updated: <%= Date.today.strftime("%-d %B %Y") %>_

### Versioning

The version of the API is specified in the URL `/api/v{n}/`. For example: `/api/v1/`, `/api/v2/`, `/api/v3/`, ...

When API changes in a way that is backwards-incompatible, a new version number of the API will be published.

When a new version, for example `/api/v2`, is published, both the previous **v1** and the current **v2** versions will be supported.

We, however, only support one version back, so if the **v3** is published, the **v1** will be discontinued.

When non-breaking changes are made to the API, this will not result in a version bump.

Information about deprecations (for instance attributes/endpoints that will be modified/removed) will be included in the API
response through a "Warning" header.

We will publish a changelog containing all breaking and non-breaking changes.
